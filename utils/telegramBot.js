// utils/telegramBot.js - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–∞

import TelegramBot from "node-telegram-bot-api";
import Doctor from "../models/Doctor.js";
import Supplier from "../models/Supplier.js";
import TelegramUser from "../models/TelegramUser.js";
import Sales from "../models/Sales.js";
import Remains from "../models/Remains.js";
import { config } from "dotenv";
config();

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const userStates = new Map();
const userPaginationData = new Map();

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
  reply_markup: {
    keyboard: [["üë®‚Äç‚öïÔ∏è –í–æ–π—Ç–∏ –∫–∞–∫ –≤—Ä–∞—á"], ["üè≠ –í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫"]],
    resize_keyboard: true,
    one_time_keyboard: true,
  },
};

// –ú–µ–Ω—é –≤—Ä–∞—á–∞
const doctorMenu = {
  reply_markup: {
    keyboard: [["üìä –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏"], ["üö™ –í—ã–π—Ç–∏"]],
    resize_keyboard: true,
  },
};

// –ú–µ–Ω—é –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
const supplierMenu = {
  reply_markup: {
    keyboard: [["üì¶ –û—Å—Ç–∞—Ç–∫–∏"], ["üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ["üö™ –í—ã–π—Ç–∏"]],
    resize_keyboard: true,
  },
};

// Pagination –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏–µ
const createPaginationButtons = (currentPage, totalPages, prefix) => {
  const buttons = [];
  const maxButtons = 5;

  let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
  let endPage = Math.min(totalPages, startPage + maxButtons - 1);

  if (endPage - startPage + 1 < maxButtons) {
    startPage = Math.max(1, endPage - maxButtons + 1);
  }

  const row1 = [];
  const row2 = [];

  if (currentPage > 1) {
    row1.push({
      text: "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
      callback_data: `${prefix}_page_${currentPage - 1}`,
    });
  }

  if (currentPage < totalPages) {
    row1.push({
      text: "–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
      callback_data: `${prefix}_page_${currentPage + 1}`,
    });
  }

  for (let i = startPage; i <= endPage; i++) {
    const text = i === currentPage ? `‚Ä¢ ${i} ‚Ä¢` : i.toString();
    row2.push({ text, callback_data: `${prefix}_page_${i}` });
  }

  if (row1.length > 0) buttons.push(row1);
  if (row2.length > 0) buttons.push(row2);

  buttons.push([
    { text: `üìÑ ${currentPage}/${totalPages}`, callback_data: "info" },
    { text: "‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data: `${prefix}_close` },
  ]);

  return {
    reply_markup: {
      inline_keyboard: buttons,
    },
  };
};

// –í—Ä–µ–º—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const formatDateTime = (date) => {
  const d = new Date(date);
  const dateStr = d.toLocaleDateString("ru-RU");
  const timeStr = d.toLocaleTimeString("ru-RU", {
    hour: "2-digit",
    minute: "2-digit",
  });
  return `${dateStr} ${timeStr}`;
};

// –ß–∏—Å–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const formatNumber = (num) => {
  return new Intl.NumberFormat("ru-RU").format(num);
};

// –ü—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
const formatPercentage = (value, total) => {
  if (total === 0) return "0%";
  return `${Math.round((value / total) * 100)}%`;
};

// –û–ë–ù–û–í–õ–ï–ù–û: –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–ø–∞–∫–æ–≤–æ–∫
const calculatePackages = (quantity, unit, pieceCount) => {
  // –ï—Å–ª–∏ –µ—Å—Ç—å pieceCount, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–ø–∞–∫–æ–≤–æ–∫
  if (pieceCount && pieceCount > 1) {
    const packages = Math.floor(quantity / pieceCount);
    const remainder = quantity % pieceCount;
    if (packages > 0) {
      if (remainder > 0) {
        return `${packages} —É–ø–∞–∫. + ${remainder} —à—Ç`;
      }
      return `${packages} —É–ø–∞–∫.`;
    }
  }
  return `${quantity} —à—Ç`;
};

// –û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–±–µ–∑ —Å–µ—Ä–∏–π, —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–∞–º)
const createProfessionalStatisticsMessage = (supplier, stats) => {
  const {
    totalProducts,
    totalQuantity,
    lowStock,
    criticalStock,
    bottomProducts, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å topProducts –Ω–∞ bottomProducts
    branchesCount,
    stockHealth,
  } = stats;

  let message = `üìä *–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢*\n`;
  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

  // Header with supplier info
  message += `üè≠ *${supplier.name}*\n`;
  message += `üìÖ ${formatDateTime(new Date())}\n`;
  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

  // Key Performance Indicators
  message += `üìà *–ö–õ–Æ–ß–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò*\n\n`;

  message += `üì¶ *–¢–æ–≤–∞—Ä–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞:* ${formatNumber(totalProducts)} –ø–æ–∑–∏—Ü–∏–π\n`;
  message += `üìä *–û–±—â–∏–π –æ–±—ä—ë–º:* ${formatNumber(totalQuantity)} –µ–¥–∏–Ω–∏—Ü\n`;
  message += `üè¢ *–§–∏–ª–∏–∞–ª—ã:* ${branchesCount} —Ç–æ—á–µ–∫\n\n`;

  // Stock Health Analysis
  message += `üéØ *–ê–ù–ê–õ–ò–ó –û–°–¢–ê–¢–ö–û–í*\n\n`;

  const healthEmoji =
    stockHealth >= 80 ? "üü¢" : stockHealth >= 60 ? "üü°" : "üî¥";
  message += `${healthEmoji} *–ó–¥–æ—Ä–æ–≤—å–µ —Å–∫–ª–∞–¥–∞:* ${stockHealth}%\n`;

  if (lowStock > 0) {
    message += `‚ö†Ô∏è *–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* ${lowStock} –ø–æ–∑–∏—Ü–∏–π\n`;
  }

  if (criticalStock > 0) {
    message += `üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å:* ${criticalStock} –ø–æ–∑–∏—Ü–∏–π\n`;
  }

  if (lowStock === 0 && criticalStock === 0) {
    message += `‚úÖ *–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ*\n`;
  }

  message += `\n`;

  // –û–ë–ù–û–í–õ–ï–ù–û: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–æ–ø–∞
  if (bottomProducts && bottomProducts.length > 0) {
    message += `‚ö†Ô∏è *–ü–û–ó–ò–¶–ò–ò –° –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ú–ò –û–°–¢–ê–¢–ö–ê–ú–ò*\n\n`;
    bottomProducts.slice(0, 5).forEach((product, index) => {
      const urgencyEmoji = 
        product.quantity < 5 ? "üî•" : 
        product.quantity < 20 ? "‚ö†Ô∏è" : "üì¶";
      message += `${index + 1}. ${urgencyEmoji} *${product.name}*\n`;
      message += `   üìä ${product.displayQuantity}\n`;
      if (product.branches > 1) {
        message += `   üè¢ ${product.branches} —Ñ–∏–ª–∏–∞–ª–æ–≤\n`;
      }
      message += `\n`;
    });
  }

  // Recommendations
  message += `üí° *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò*\n\n`;

  if (criticalStock > 0) {
    message += `üî• *–°—Ä–æ—á–Ω–æ:* –ü–æ–ø–æ–ª–Ω–∏—Ç–µ ${criticalStock} –ø–æ–∑–∏—Ü–∏–π\n`;
  }

  if (lowStock > 0) {
    message += `‚ö†Ô∏è *–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:* –ó–∞–∫–∞–∂–∏—Ç–µ ${lowStock} –ø–æ–∑–∏—Ü–∏–π\n`;
  }

  if (stockHealth >= 80) {
    message += `‚úÖ *–û—Ç–ª–∏—á–Ω–æ:* –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π\n`;
  } else if (stockHealth >= 60) {
    message += `üìã *–•–æ—Ä–æ—à–æ:* –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n`;
  } else {
    message += `üìà *–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è:* –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n`;
  }

  message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  message += `ü§ñ _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã_\n`;
  message += `‚è∞ _–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${formatDateTime(new Date())}_`;

  return message;
};

// –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—á–µ—Ç (—Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–∞–º)
const calculateSupplierStatistics = async (supplierName) => {
  try {
    // –û—Å–Ω–æ–≤–Ω–æ–π aggregation - –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å–µ—Ä–∏–π
    const pipeline = [
      { $match: { manufacturer: supplierName } },
      {
        $group: {
          _id: {
            product: "$product",
            branch: "$branch",
          },
          totalQuantity: { $sum: "$quantity" },
          unit: { $first: "$unit" },
          pieceCount: { $first: "$pieceCount" },
          buyPrice: { $first: "$buyPrice" },
          salePrice: { $first: "$salePrice" },
          location: { $first: "$location" },
          // –ù–µ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ä–∏—é –≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
        },
      },
    ];

    const groupedData = await Remains.aggregate(pipeline);

    // Products –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    const productStats = new Map();
    let totalQuantity = 0;
    const branches = new Set();

    groupedData.forEach((item) => {
      const productName = item._id.product;
      const branchName = item._id.branch;

      branches.add(branchName);
      totalQuantity += item.totalQuantity;

      if (!productStats.has(productName)) {
        productStats.set(productName, {
          name: productName,
          totalQuantity: 0,
          unit: item.unit,
          pieceCount: item.pieceCount,
          branches: new Set(),
          locations: new Set(),
        });
      }

      const product = productStats.get(productName);
      product.totalQuantity += item.totalQuantity;
      product.branches.add(branchName);
      if (item.location) product.locations.add(item.location);
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—á–µ—Ç
    const products = Array.from(productStats.values());
    const totalProducts = products.length;

    // Low stock –≤–∞ critical stock —Ä–∞—Å—Å—á–µ—Ç
    let lowStock = 0;
    let criticalStock = 0;

    products.forEach((product) => {
      if (product.unit === "—à—Ç" || product.unit === "—à—Ç—É–∫" || !product.unit) {
        if (product.totalQuantity < 5) {
          criticalStock++;
        } else if (product.totalQuantity < 20) {
          lowStock++;
        }
      }
    });

    // –û–ë–ù–û–í–õ–ï–ù–û: Bottom products (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏) –≤–º–µ—Å—Ç–æ top
    const bottomProducts = products
      .sort((a, b) => a.totalQuantity - b.totalQuantity) // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
      .slice(0, 10)
      .map((product) => ({
        name: product.name,
        quantity: product.totalQuantity,
        displayQuantity: calculatePackages(
          product.totalQuantity,
          product.unit,
          product.pieceCount
        ),
        unit: product.unit,
        branches: product.branches.size,
      }));

    // Stock health —Ä–∞—Å—Å—á–µ—Ç
    const healthyStock = totalProducts - lowStock - criticalStock;
    const stockHealth = Math.round((healthyStock / totalProducts) * 100);

    return {
      totalProducts,
      totalQuantity,
      lowStock,
      criticalStock,
      bottomProducts, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å topProducts
      branchesCount: branches.size,
      averageQuantityPerProduct: Math.round(totalQuantity / totalProducts),
      stockHealth: isNaN(stockHealth) ? 100 : stockHealth,
    };
  } catch (error) {
    console.error("Statistics calculation error:", error);
    return {
      totalProducts: 0,
      totalQuantity: 0,
      lowStock: 0,
      criticalStock: 0,
      bottomProducts: [],
      branchesCount: 0,
      stockHealth: 0,
    };
  }
};

// –û–ë–ù–û–í–õ–ï–ù–û: Sales –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ–∫ –Ω–æ–º–µ—Ä –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤)
const getGroupedSalesPage = async (doctorCode, page = 1, checksPerPage = 3) => {
  try {
    const sales = await Sales.find({
      doctorCode: doctorCode,
      hasItems: true,
      itemsCount: { $gt: 0 },
    }).sort({ createdAt: -1 });

    const checkGroups = new Map();

    for (const sale of sales) {
      if (sale.items && sale.items.length > 0) {
        const checkKey = `${sale.number}_${
          sale.date.toISOString().split("T")[0]
        }`;

        if (!checkGroups.has(checkKey)) {
          checkGroups.set(checkKey, {
            checkNumber: sale.number,
            checkDate: sale.date,
            createdAt: sale.createdAt,
            items: [],
            totalAmount: sale.soldAmount || 0,
          });
        }

        const checkData = checkGroups.get(checkKey);
        checkData.items.push(...sale.items);
      }
    }

    const checksArray = Array.from(checkGroups.values()).sort(
      (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
    );

    const totalChecks = checksArray.length;
    const totalPages = Math.ceil(totalChecks / checksPerPage);
    const startIndex = (page - 1) * checksPerPage;
    const endIndex = startIndex + checksPerPage;
    const pageChecks = checksArray.slice(startIndex, endIndex);

    return {
      checks: pageChecks,
      currentPage: page,
      totalPages: totalPages,
      totalChecks: totalChecks,
      hasMore: page < totalPages,
    };
  } catch (error) {
    console.error("Grouped sales —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–∫–∞:", error);
    return {
      checks: [],
      currentPage: 1,
      totalPages: 1,
      totalChecks: 0,
      hasMore: false,
    };
  }
};

// –û–ë–ù–û–í–õ–ï–ù–û: –§–∏–ª–∏–∞–ª –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–±–µ–∑ —Å–µ—Ä–∏–π, —Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏)
const getBranchGroupedRemainsPage = async (
  supplierName,
  page = 1,
  productsPerPage = 4
) => {
  try {
    const productGroups = await Remains.aggregate([
      { $match: { manufacturer: supplierName } },
      {
        $group: {
          _id: "$product",
          branches: {
            $push: {
              branch: "$branch",
              quantity: "$quantity",
              unit: "$unit",
              pieceCount: "$pieceCount",
              location: "$location",
              shelfLife: "$shelfLife",
            },
          },
          totalQuantity: { $sum: "$quantity" },
          unit: { $first: "$unit" },
          pieceCount: { $first: "$pieceCount" },
        },
      },
      { $sort: { totalQuantity: 1 } }, // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏)
    ]);

    const totalProducts = productGroups.length;
    const totalPages = Math.ceil(totalProducts / productsPerPage);
    const startIndex = (page - 1) * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    const pageProducts = productGroups.slice(startIndex, endIndex);

    return {
      products: pageProducts,
      currentPage: page,
      totalPages: totalPages,
      totalProducts: totalProducts,
      hasMore: page < totalPages,
    };
  } catch (error) {
    console.error("Branch grouped remains —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–∫–∞:", error);
    return {
      products: [],
      currentPage: 1,
      totalPages: 1,
      totalProducts: 0,
      hasMore: false,
    };
  }
};

// –û–ë–ù–û–í–õ–ï–ù–û: Grouped sales —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è)
const formatGroupedSalesPage = (pageData) => {
  if (pageData.checks.length === 0) {
    return "üìä *–ü—Ä–æ–¥–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*";
  }

  let message = `üìä *–û–¢–ß–Å–¢ –ü–û –ü–†–û–î–ê–ñ–ê–ú*\n`;
  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
  message += `üßæ *–í—Å–µ–≥–æ —á–µ–∫–æ–≤:* ${formatNumber(pageData.totalChecks)}\n\n`;

  pageData.checks.forEach((checkData, checkIndex) => {
    const globalCheckIndex = (pageData.currentPage - 1) * 3 + checkIndex + 1;
    message += `${globalCheckIndex}. üßæ *–ß–µ–∫ ‚Ññ${checkData.checkNumber}*\n`;
    message += `üìÖ ${formatDateTime(checkData.createdAt)}\n`;
    message += `üí∞ *${formatNumber(checkData.totalAmount)} —Å—É–º*\n`;

    message += `\nüì¶ *–¢–æ–≤–∞—Ä—ã –≤ —á–µ–∫–µ:*\n`;

    checkData.items.forEach((item, itemIndex) => {
      message += `   ${itemIndex + 1}. üíä ${item.product}\n`;
      message += `      üìä ${item.quantity} —à—Ç\n`;
    });
    message += "\n";
  });

  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  message += `ü§ñ _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã_\n`;
  message += `‚è∞ _${formatDateTime(new Date())}_`;

  return message;
};

// –û–ë–ù–û–í–õ–ï–ù–û: Branch grouped remains —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ —Å–µ—Ä–∏–π, —Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏)
const formatBranchGroupedRemainsPage = (pageData) => {
  if (pageData.products.length === 0) {
    return "üì¶ *–û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*";
  }

  let message = `üì¶ *–°–ö–õ–ê–î–°–ö–ò–ï –û–°–¢–ê–¢–ö–ò*\n`;
  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
  message += `üìä *–í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π:* ${formatNumber(pageData.totalProducts)}\n\n`;

  pageData.products.forEach((product, index) => {
    const globalIndex = (pageData.currentPage - 1) * 4 + index + 1;
    const urgencyEmoji = 
      product.totalQuantity < 5 ? "üî•" : 
      product.totalQuantity < 20 ? "‚ö†Ô∏è" : "üì¶";
    
    message += `${globalIndex}. ${urgencyEmoji} *${product._id}*\n`;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —É–ø–∞–∫–æ–≤–∫–∏
    const displayQuantity = calculatePackages(
      product.totalQuantity,
      product.unit,
      product.pieceCount
    );
    message += `üìä *–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:* ${displayQuantity}\n\n`;

    // –§–∏–ª–∏–∞–ª—ã –ø–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
    const branchGroups = new Map();
    product.branches.forEach((branch) => {
      const branchName = branch.branch || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª";
      if (!branchGroups.has(branchName)) {
        branchGroups.set(branchName, []);
      }
      branchGroups.get(branchName).push(branch);
    });

    message += `üè™ *–§–∏–ª–∏–∞–ª—ã:*\n`;
    let branchIndex = 1;
    for (const [branchName, branchItems] of branchGroups) {
      const branchTotal = branchItems.reduce(
        (sum, item) => sum + item.quantity,
        0
      );
      const branchDisplay = calculatePackages(
        branchTotal,
        product.unit,
        product.pieceCount
      );
      message += `   ${branchIndex}. üè¢ ${branchName}\n`;
      message += `      üìä ${branchDisplay}\n`;

      const uniqueLocations = [
        ...new Set(
          branchItems.map((item) => item.location).filter((l) => l && l !== "-")
        ),
      ];

      if (uniqueLocations.length > 0) {
        message += `      üìç ${uniqueLocations.slice(0, 2).join(", ")}\n`;
      }

      branchIndex++;
    }
    message += "\n";
  });

  message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
  message += `ü§ñ _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã_\n`;
  message += `‚è∞ _${formatDateTime(new Date())}_`;

  return message;
};

// –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∞
const checkLowStockAndNotify = async () => {
  try {
    console.log("üîç –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è...");

    const suppliers = await Supplier.find({ isActive: true });

    for (const supplier of suppliers) {
      const lowStockItems = await Remains.aggregate([
        {
          $match: {
            manufacturer: supplier.name,
            $or: [
              { unit: "—à—Ç" },
              { unit: "—à—Ç—É–∫" },
              { unit: "—à—Ç." },
              { unit: null },
              { unit: "" },
            ],
          },
        },
        {
          $group: {
            _id: {
              product: "$product",
              branch: "$branch",
            },
            totalQuantity: { $sum: "$quantity" },
            unit: { $first: "$unit" },
            pieceCount: { $first: "$pieceCount" },
            location: { $first: "$location" },
          },
        },
        {
          $match: {
            totalQuantity: { $lt: 10 },
          },
        },
        { $sort: { totalQuantity: 1 } },
      ]);

      if (lowStockItems.length > 0) {
        console.log(
          `‚ö†Ô∏è ${supplier.name}: ${lowStockItems.length} –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ`
        );
        await notifySupplierLowStock(supplier._id, lowStockItems);
      }
    }
  } catch (error) {
    console.error("‚ùå –ù–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∞:", error);
  }
};

// –û–ë–ù–û–í–õ–ï–ù–û: –ü–æ—Å—Ç–∞–≤—â–∏–∫—É –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Å —É–ø–∞–∫–æ–≤–∫–∞–º–∏, –±–µ–∑ —Å–µ—Ä–∏–π)
const notifySupplierLowStock = async (supplierId, lowStockItems) => {
  try {
    const telegramUser = await TelegramUser.findOne({
      userId: supplierId,
      userType: "supplier",
    });

    if (!telegramUser) return;

    const supplier = await Supplier.findById(supplierId);
    if (!supplier) return;

    let message = `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    message += `üè≠ *${supplier.name}*\n`;
    message += `üìÖ ${formatDateTime(new Date())}\n\n`;
    message += `‚ö†Ô∏è *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏*\n`;
    message += `üìä –ù–∞–π–¥–µ–Ω–æ *${lowStockItems.length} –ø–æ–∑–∏—Ü–∏–π* —Å –æ—Å—Ç–∞—Ç–∫–æ–º –º–µ–Ω–µ–µ 10 —à—Ç\n\n`;

    const itemsToShow = lowStockItems.slice(0, 8);

    itemsToShow.forEach((item, index) => {
      const urgencyEmoji =
        item.totalQuantity < 3 ? "üî•" : item.totalQuantity < 5 ? "‚ö†Ô∏è" : "üì¶";
      const displayQuantity = calculatePackages(
        item.totalQuantity,
        item.unit,
        item.pieceCount
      );
      message += `${urgencyEmoji} ${index + 1}. *${item._id.product}*\n`;
      message += `   üè¢ ${item._id.branch || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–∏–∞–ª"}\n`;
      message += `   üìä –û—Å—Ç–∞—Ç–æ–∫: *${displayQuantity}*\n`;
      if (item.location && item.location !== "-") {
        message += `   üìç ${item.location}\n`;
      }
      message += "\n";
    });

    if (lowStockItems.length > 8) {
      message += `üìã ... –∏ –µ—â—ë *${lowStockItems.length - 8} –ø–æ–∑–∏—Ü–∏–π*\n\n`;
    }

    message += `üéØ *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n`;
    message += `‚Ä¢ –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (< 5 —à—Ç)\n`;
    message += `‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º\n`;
    message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–∞–Ω–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º\n\n`;

    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `ü§ñ _–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ø—Ç–µ–∫–æ–π_\n`;
    message += `‚ö†Ô∏è _–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å: < 10 —à—Ç_`;

    await bot.sendMessage(telegramUser.chatId, message, {
      parse_mode: "Markdown",
    });

    console.log(
      `‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${supplier.name}`
    );
  } catch (error) {
    console.error("‚ùå –ü–æ—Å—Ç–∞–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∞:", error);
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞ –¥–æ–∫—Ç–æ—Ä–∞
export const clearDoctorChat = async (doctorId) => {
  try {
    const telegramUser = await TelegramUser.findOne({
      userId: doctorId,
      userType: "doctor"
    });

    if (telegramUser && telegramUser.chatId) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
      await bot.sendMessage(
        telegramUser.chatId,
        "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        mainMenu
      );
      
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å —Å —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º
      await TelegramUser.deleteOne({ _id: telegramUser._id });
      
      console.log(`‚úÖ –ß–∞—Ç –¥–æ–∫—Ç–æ—Ä–∞ ${doctorId} –æ—á–∏—â–µ–Ω`);
      return true;
    }
    return false;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞ –¥–æ–∫—Ç–æ—Ä–∞:", error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–æ–∫—Ç–æ—Ä–æ–≤
export const clearAllDoctorChats = async () => {
  try {
    const telegramUsers = await TelegramUser.find({ userType: "doctor" });
    
    for (const user of telegramUsers) {
      try {
        await bot.sendMessage(
          user.chatId,
          "‚ùå –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
          mainMenu
        );
      } catch (error) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.chatId}`);
      }
    }
    
    const result = await TelegramUser.deleteMany({ userType: "doctor" });
    console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${result.deletedCount} —á–∞—Ç–æ–≤ –¥–æ–∫—Ç–æ—Ä–æ–≤`);
    return result.deletedCount;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤:", error);
    return 0;
  }
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates.delete(chatId);
  userPaginationData.delete(chatId);
  bot.sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ö–æ–¥–∞:", mainMenu);
});

// Callback query handler
bot.on("callback_query", async (callbackQuery) => {
  const message = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = message.chat.id;

  try {
    // Sales pagination
    if (data.startsWith("sales_page_")) {
      const page = parseInt(data.split("_")[2]);
      const paginationData = userPaginationData.get(chatId);

      if (paginationData && paginationData.type === "sales") {
        const pageData = await getGroupedSalesPage(
          paginationData.doctorCode,
          page
        );
        const messageText = formatGroupedSalesPage(pageData);
        const buttons = createPaginationButtons(
          page,
          pageData.totalPages,
          "sales"
        );

        await bot.editMessageText(messageText, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: "Markdown",
          ...buttons,
        });
      }
    }

    // Remains pagination
    else if (data.startsWith("remains_page_")) {
      const page = parseInt(data.split("_")[2]);
      const paginationData = userPaginationData.get(chatId);

      if (paginationData && paginationData.type === "remains") {
        const pageData = await getBranchGroupedRemainsPage(
          paginationData.supplierName,
          page
        );
        const messageText = formatBranchGroupedRemainsPage(pageData);
        const buttons = createPaginationButtons(
          page,
          pageData.totalPages,
          "remains"
        );

        await bot.editMessageText(messageText, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: "Markdown",
          ...buttons,
        });
      }
    }

    // Close buttons
    else if (data === "sales_close" || data === "remains_close") {
      userPaginationData.delete(chatId);
      await bot.deleteMessage(chatId, message.message_id);
    } else if (data === "info") {
      // Do nothing
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.error("Callback query –æ—à–∏–±–∫–∞:", error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    });
  }
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === "/start") return;

  const userState = userStates.get(chatId) || {};

  try {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (text === "üë®‚Äç‚öïÔ∏è –í–æ–π—Ç–∏ –∫–∞–∫ –≤—Ä–∞—á") {
      userStates.set(chatId, { type: "doctor_login", step: "username" });
      bot.sendMessage(chatId, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
      return;
    }

    if (text === "üè≠ –í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫") {
      userStates.set(chatId, { type: "supplier_login", step: "username" });
      bot.sendMessage(chatId, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:");
      return;
    }

    if (text === "üö™ –í—ã–π—Ç–∏") {
      await TelegramUser.deleteOne({ chatId });
      userStates.delete(chatId);
      userPaginationData.delete(chatId);
      bot.sendMessage(chatId, "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", mainMenu);
      return;
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞
    if (userState.type === "doctor_login") {
      if (userState.step === "username") {
        userState.username = text;
        userState.step = "password";
        userStates.set(chatId, userState);
        bot.sendMessage(chatId, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
        return;
      }

      if (userState.step === "password") {
        const doctor = await Doctor.findOne({
          login: userState.username,
          password: text,
        });

        if (doctor) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          if (!doctor.isActive) {
            userStates.delete(chatId);
            bot.sendMessage(
              chatId,
              "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
              mainMenu
            );
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          if (doctor.activeUntil && new Date(doctor.activeUntil) < new Date()) {
            userStates.delete(chatId);
            bot.sendMessage(
              chatId,
              "‚ùå –°—Ä–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
              mainMenu
            );
            return;
          }

          await TelegramUser.findOneAndUpdate(
            { chatId },
            { chatId, userType: "doctor", userId: doctor._id },
            { upsert: true }
          );

          userStates.delete(chatId);
          bot.sendMessage(
            chatId,
            `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${doctor.name}!`,
            doctorMenu
          );
        } else {
          userStates.delete(chatId);
          bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞", mainMenu);
        }
        return;
      }
    }

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (userState.type === "supplier_login") {
      if (userState.step === "username") {
        userState.username = text;
        userState.step = "password";
        userStates.set(chatId, userState);
        bot.sendMessage(chatId, "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
        return;
      }

      if (userState.step === "password") {
        const supplier = await Supplier.findOne({
          username: userState.username,
          password: text,
        });

        if (supplier) {
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          if (!supplier.isActive) {
            userStates.delete(chatId);
            bot.sendMessage(
              chatId,
              "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
              mainMenu
            );
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
          if (supplier.activeUntil && new Date(supplier.activeUntil) < new Date()) {
            userStates.delete(chatId);
            bot.sendMessage(
              chatId,
              "‚ùå –°—Ä–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.",
              mainMenu
            );
            return;
          }

          await TelegramUser.findOneAndUpdate(
            { chatId },
            { chatId, userType: "supplier", userId: supplier._id },
            { upsert: true }
          );

          userStates.delete(chatId);
          bot.sendMessage(
            chatId,
            `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${supplier.name}!`,
            supplierMenu
          );
        } else {
          userStates.delete(chatId);
          bot.sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞", mainMenu);
        }
        return;
      }
    }

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const telegramUser = await TelegramUser.findOne({ chatId });
    if (!telegramUser) {
      bot.sendMessage(chatId, "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É", mainMenu);
      return;
    }

    // –ö–æ–º–∞–Ω–¥—ã –≤—Ä–∞—á–∞
    if (telegramUser.userType === "doctor") {
      const doctor = await Doctor.findById(telegramUser.userId);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      if (!doctor || !doctor.isActive || (doctor.activeUntil && new Date(doctor.activeUntil) < new Date())) {
        await TelegramUser.deleteOne({ chatId });
        userStates.delete(chatId);
        userPaginationData.delete(chatId);
        bot.sendMessage(
          chatId,
          "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫.",
          mainMenu
        );
        return;
      }

      if (text === "üìä –ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏") {
        const pageData = await getGroupedSalesPage(doctor.code, 1);

        if (pageData.totalChecks === 0) {
          bot.sendMessage(chatId, "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂");
          return;
        }

        userPaginationData.set(chatId, {
          type: "sales",
          doctorCode: doctor.code,
        });

        const messageText = formatGroupedSalesPage(pageData);
        const buttons = createPaginationButtons(
          1,
          pageData.totalPages,
          "sales"
        );

        bot.sendMessage(chatId, messageText, {
          parse_mode: "Markdown",
          ...buttons,
        });
        return;
      }
    }

    // –ö–æ–º–∞–Ω–¥—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (telegramUser.userType === "supplier") {
      // –ü–æ—Å—Ç–∞–≤—â–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
      const supplier = await Supplier.findById(telegramUser.userId);
      if (!supplier || !supplier.isActive || (supplier.activeUntil && new Date(supplier.activeUntil) < new Date())) {
        await TelegramUser.deleteOne({ chatId });
        userStates.delete(chatId);
        userPaginationData.delete(chatId);
        bot.sendMessage(
          chatId,
          "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Å—Ä–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫.",
          mainMenu
        );
        return;
      }

      if (text === "üì¶ –û—Å—Ç–∞—Ç–∫–∏") {
        const pageData = await getBranchGroupedRemainsPage(supplier.name, 1);

        if (pageData.totalProducts === 0) {
          bot.sendMessage(chatId, "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
          return;
        }

        userPaginationData.set(chatId, {
          type: "remains",
          supplierName: supplier.name,
        });

        const messageText = formatBranchGroupedRemainsPage(pageData);
        const buttons = createPaginationButtons(
          1,
          pageData.totalPages,
          "remains"
        );

        bot.sendMessage(chatId, messageText, {
          parse_mode: "Markdown",
          ...buttons,
        });
        return;
      }

      if (text === "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
        // Loading message
        const loadingMessage = await bot.sendMessage(
          chatId,
          "üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É...\n‚è∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
          { parse_mode: "Markdown" }
        );

        try {
          // Comprehensive statistics —Ä–∞—Å—Å—á–µ—Ç
          const stats = await calculateSupplierStatistics(supplier.name);

          // Professional message —Å–æ–∑–¥–∞–Ω–∏–µ
          const statisticsMessage = createProfessionalStatisticsMessage(
            supplier,
            stats
          );

          // Loading message —É–¥–∞–ª–µ–Ω–∏–µ –∏ statistics –æ—Ç–ø—Ä–∞–≤–∫–∞
          await bot.deleteMessage(chatId, loadingMessage.message_id);
          await bot.sendMessage(chatId, statisticsMessage, {
            parse_mode: "Markdown",
          });
        } catch (error) {
          await bot.deleteMessage(chatId, loadingMessage.message_id);
          await bot.sendMessage(
            chatId,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
          );
          console.error("Statistics generation error:", error);
        }
        return;
      }
    }

    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    if (telegramUser.userType === "doctor") {
      bot.sendMessage(
        chatId,
        "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
        doctorMenu
      );
    } else if (telegramUser.userType === "supplier") {
      bot.sendMessage(
        chatId,
        "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
        supplierMenu
      );
    } else {
      bot.sendMessage(chatId, "‚ùì –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", mainMenu);
    }
  } catch (error) {
    console.error("‚ùå –ë–æ—Ç –æ—à–∏–±–∫–∞:", error);
    bot.sendMessage(chatId, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –ù–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏—è
export const notifyDoctorAboutSale = async (saleId, doctorCode) => {
  try {
    const doctor = await Doctor.findOne({ code: doctorCode });
    if (!doctor || !doctor.isActive) return;

    const telegramUser = await TelegramUser.findOne({
      userId: doctor._id,
      userType: "doctor",
    });
    if (!telegramUser) return;

    if (telegramUser.lastNotifiedSales?.includes(saleId)) return;

    const sale = await Sales.findOne({ id: saleId });
    if (!sale || !sale.items || sale.items.length === 0) return;

    let message = `üîî *–ù–û–í–ê–Ø –ü–†–û–î–ê–ñ–ê*\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    message += `üë®‚Äç‚öïÔ∏è Dr. ${doctor.name}\n`;
    message += `üßæ –ß–µ–∫ ‚Ññ${sale.number}\n`;
    message += `üí∞ ${formatNumber(sale.soldAmount)} —Å—É–º\n`;
    message += `üìÖ ${formatDateTime(sale.createdAt)}\n\n`;
    message += `üì¶ *–¢–æ–≤–∞—Ä—ã:*\n`;

    sale.items.forEach((item, index) => {
      message += `${index + 1}. üíä ${item.product}\n`;
      message += `   üìä ${item.quantity} —à—Ç\n`;
    });

    message += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `ü§ñ _–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ_\n`;
    message += `‚è∞ _${formatDateTime(new Date())}_`;

    await bot.sendMessage(telegramUser.chatId, message, {
      parse_mode: "Markdown",
    });

    await TelegramUser.findByIdAndUpdate(telegramUser._id, {
      $push: { lastNotifiedSales: saleId },
    });
  } catch (error) {
    console.error("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∞:", error);
  }
};

// –í—Ä–∞—á—É –∞–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∞
export const sendMessageToDoctor = async (chatId, message, doctorName) => {
  try {
    const formattedMessage =
      `üì¢ *–°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üë®‚Äç‚öïÔ∏è Dr. ${doctorName}\n\n` +
      `üí¨ ${message}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n` +
      `üè• _–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ø—Ç–µ–∫–æ–π_\n` +
      `‚è∞ _${formatDateTime(new Date())}_`;

    await bot.sendMessage(chatId, formattedMessage, {
      parse_mode: "Markdown",
    });

    console.log(
      `‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∞–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Dr. ${doctorName}`
    );
    return true;
  } catch (error) {
    console.error(`‚ùå –ê–¥–º–∏–Ω —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∞ –¥–ª—è Dr. ${doctorName}:`, error);
    return false;
  }
};

export { checkLowStockAndNotify, notifySupplierLowStock };
export default bot;